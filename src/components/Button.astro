---
// import "../astro/button-group.css";

interface Props {
    text?: string;
    element: "a" | "button" | "span";
    href?: string;
    type?: "button" | "submit" | "reset";
    autofocus?: boolean;
    variant?: string;
    disabled?: boolean;
    name?: string;
    onClick?: any;
    target?: "_blank" | "_self" | "_parent" | "_top";
    download?: boolean;
    value?: string;
    id?: string;
    iconPosition?: "left" | "right";
    shape?: "circle" | "pill";
}

// TODO: add popovertarget, popovertargetaction for button type.

const {
    text,
    element = "button",
    href = "#",
    type = "button",
    autofocus = false,
    variant = "default",
    disabled = false,
    name,
    onClick,
    target,
    download = false,
    value,
    id,
    iconPosition,
    shape,
} = Astro.props;

//const buttonClasses = `button ${variant ? `button--${variant}` : ""} ${autofocus ? "button--autofocus" : ""} ${disabled ? "button--disabled" : ""}`;
const buttonClasses = `
  button
  ${variant ? `button--${variant}` : ""}
  ${autofocus ? "button--autofocus" : ""}
  ${disabled ? "button--disabled" : ""}
  ${iconPosition ? `button--icon button--icon-${iconPosition}` : ""}
  ${iconPosition && (!text || text === "") ? "button--icon-only" : ""}
  ${shape ? `button--${shape}` : ""}
`
    .trim()
    .replace(/\s+/g, " ");
---

{
    element === "button" && (
        <button
            class={buttonClasses}
            type={type}
            {...(autofocus ? { autofocus: true } : {})}
            {...(disabled ? { disabled: true } : {})}
            {...(name ? { name: name } : {})}
            {...(onClick ? { onClick: onClick } : {})}
            {...(value ? { value: value } : {})}
            {...(id ? { id: id } : {})}
        >
            {iconPosition === "left" && <slot name="icon" />}
            {text}
            {iconPosition === "right" && <slot name="icon" />}
        </button>
    )
}

{
    element === "a" && (
        <a
            class={buttonClasses}
            href={href}
            {...(target ? { target: target } : {})}
            {...(download ? { download: true } : {})}
            {...(onClick ? { onClick: onClick } : {})}
        >
            {iconPosition === "left" && <slot name="icon" />}
            {text}
            {iconPosition === "right" && <slot name="icon" />}
        </a>
    )
}

{element === "span" && <span class={buttonClasses}>{text}</span>}

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const autofocusLink = document.querySelector("a.button--autofocus");
        if (autofocusLink instanceof HTMLAnchorElement) {
            autofocusLink.focus();
        }
    });
</script>

<style>
    .button {
        background-color: var(--color-background-default, white);
        color: var(--color-text-default, currentColor);
        border: 1px solid currentColor;
        outline: 4px solid currentColor;
        border-radius: 8px;
        outline-offset: 2px;
        font-family: var(--font-family-text-body), sans-serif;
        font-size: 1rem;
        font-weight: 600;
        line-height: 24px;
        padding: 0.5625em 1.5em;
        margin-block: 1lh;
        margin-inline: 4px;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        gap: 0.5em;
        text-decoration: none;
        text-transform: capitalize;
        letter-spacing: normal;
        transition: all 0.3s ease;
        -webkit-appearance: none;
        cursor: pointer;
    }

    .button:active {
        background-color: var(--color-primary);
        color: white;
        outline-width: 4px;
        outline-color: var(--color-primary);
    }

    .button:focus,
    .button:hover {
        outline-offset: 4px;
    }

    .button--primary {
        background-color: var(--color-primary);
        color: white;
        border-color: currentColor;
        outline-color: var(--color-primary);
    }

    .button--primary:active {
        background-color: var(--color-orange);
        color: black;
        border-color: var(--color-orange);
        outline-color: var(--color-orange);
    }

    .button--disabled,
    .button--disabled:active {
        color: #ccc;
        border-color: #ccc;
    }

    .button--disabled:hover {
        outline-offset: 2px;
        cursor: not-allowed;
    }

    .button--disabled:active {
        background-color: #fff;
        outline-color: #ccc;
        pointer-events: none;
        outline-offset: 2px;
    }

    /* icon */
    .button--icon-only {
        padding-inline: 9px;
    }

    .button--icon :global(svg) {
        pointer-events: none;
    }

    .button--circle {
        border-radius: 50%;
        padding: 0;
        border: 0;
        outline-offset: 0;
    }

    .button--circle:active,
    .button--circle:focus,
    .button--circle:hover {
        outline-width: 2px;
    }

    /* on different backgrounds */
    /* :global(.bg--primary) .button.button--default { */
    /*     background-color: var(--color-ui-background-primary, currentColor); */
    /*     color: var(--color-ui-text-on-primary, currentColor); */
    /* } */
    /**/
    /* :global(.bg--primary) .button.button--default:active { */
    /*     background-color: var(--color-ui-background-light, currentColor); */
    /*     color: var(--color-ui-text-primary, currentColor); */
    /*     outline-color: var(--color-ui-border-lighter, currentColor); */
    /* } */
    /**/
    /* :global(.bg--primary) .button.button--primary { */
    /*     background-color: var(--color-ui-background-primary, currentColor); */
    /*     color: var(--color-ui-text-on-primary, currentColor); */
    /*     border-color: var(--color-ui-border-lighter, currentColor); */
    /* } */
    /**/
    /* :global(.bg--primary) .button.button--primary:active { */
    /*     background-color: var(--color-ui-background-light, currentColor); */
    /*     color: var(--color-ui-text-primary, currentColor); */
    /*     border-color: var(--color-ui-border-primary, currentColor); */
    /*     outline-color: var(--color-ui-border-lighter, currentColor); */
    /* } */
    /**/
    /* :global(.bg--primary) .button.button--inverted:active { */
    /*     background-color: var(--color-ui-background-light, currentColor); */
    /*     border-color: var(--color-ui-border-primary, currentColor); */
    /*     color: var(--color-ui-text-primary, currentColor); */
    /* } */

    /* @media (prefers-color-scheme: dark) { */
    /*     .button:active:not(.button--primary) { */
    /*         background-color: var(--color-ui-background-light, currentColor); */
    /*         color: var(--color-ui-text-dark, yellow); */
    /*     } */
    /**/
    /*     .button--primary:active { */
    /*         border-color: var(--color-ui-border-primary, currentColor); */
    /*     } */
    /* } */
</style>
