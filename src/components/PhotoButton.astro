---
import type { ImageMetadata } from "astro";
import { Picture } from "astro:assets";
import { z } from "zod";
import CloseIcon from "../assets/images/svg/x-circle.svg";

// Define the Zod schema for props
const PropsSchema = z.object({
    title: z.string().optional(),
    imagePath: z.string(),
    altText: z.string(),
    position: z.string().optional(),
    orientation: z.enum(["portrait", "landscape", "square"]).optional(),
});

// Infer the TypeScript type from the schema
type Props = z.infer<typeof PropsSchema>;

// Validate the props using the schema
const result = PropsSchema.safeParse(Astro.props);

if (!result.success) {
    throw new Error(
        `Invalid props: ${result.error.issues.map((issue) => issue.message).join(", ")}`,
    );
}

const { imagePath, altText, position, title, orientation } = Astro.props;
const images = import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/images/**/*.{jpeg,jpg,png,gif}",
);
if (!images[imagePath])
    throw new Error(
        `"${imagePath}" does not exist in glob: "src/assets/*.{jpeg,jpg,png,gif}"`,
    );
const id = Math.random().toString(36).slice(2, 11);
const hasSlotContent = Astro.slots.default;
---

<dialog id={id} class="dialog">
    {
        title && (
            <header class="dialog__header">
                <div class="button-group dialog__button-group">
                    <button id={`${id}-close`} class="photo-button__close">
                        <CloseIcon />
                    </button>
                </div>
                <span class="dialog__title">{title}</span>
            </header>
        )
    }
    <div
        class="dialog__content"
        class:list={[orientation && `is-${orientation}`]}
    >
        <figure class="dialog__figure">
            <Picture
                src={images[imagePath]()}
                alt={altText}
                formats={["avif"]}
                quality={60}
                widths={[1126]}
                width={1126}
                loading="eager"
                pictureAttributes={{
                    class: `masonry-grid__item nh-l-grid-photo photo-button__picture${position ? ` position-${position}` : ""}`,
                }}
                class:list={["masonry-grid__item-image photo-button__img"]}
                position="center"
                fit="contain"
            />
            {
                hasSlotContent && (
                    <figcaption class="caption">
                        <slot />
                    </figcaption>
                )
            }
        </figure>
    </div>
</dialog>
<button id={`${id}-open`} class="photo-button__open" type="button">
    <Picture
        src={images[imagePath]()}
        alt={altText}
        formats={["avif"]}
        quality={60}
        widths={[1126]}
        width={1126}
        loading="eager"
        pictureAttributes={{
            class: `masonry-grid__item nh-l-grid-photo photo-button__picture${position ? ` position-${position}` : ""}`,
        }}
        class:list={["masonry-grid__item-image lightbox__img"]}
        title="Click to show larger version."
        layout="none"
        position={position}
    />
</button>

<style>
    button {
        background-color: transparent;
        color: inherit;
        margin: 0;
        padding: 0;
        border-radius: 0;
        cursor: pointer;
    }

    @supports not (grid-template-rows: masonry) {
        .photo-button__open picture img {
            aspect-ratio: 1;
            object-fit: cover;
            object-position: center;
        }
    }

    .photo-button__open picture.position-top img {
        object-position: top;
    }

    .photo-button__open picture.position-bottom img {
        object-position: bottom;
    }

    .photo-button__open picture.position-left img {
        object-position: left;
    }

    .photo-button__open picture.position-right img {
        object-position: right;
    }
    .photo-button__close {
        width: 20px;
        aspect-ratio: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 20px;
    }

    dialog.dialog {
        padding: 0;
        transition-property: display, opacity;
        transition-duration: 0.3s;
        transition-behavior: allow-discrete;
        position: fixed; /* This is key */
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
        overflow: hidden;
        background-color: #fff;
    }

    body:has(dialog[open]) {
        overflow: hidden;
    }

    @media (prefers-color-scheme: dark) {
        dialog.dialog::backdrop {
            background-color: var(--color-ui-background-dark-alpha);
        }
    }

    dialog.dialog:not([open]) {
        display: none;
        opacity: 0;
        translate: 0 5vh;
    }

    dialog.dialog[open] {
        opacity: 1;

        @starting-style {
            opacity: 0;
            translate: 0 -5vh;
        }
    }

    dialog.dialog[open]:focus-visible {
        outline: none;
    }

    dialog.dialog::backdrop {
        background-color: var(--color-ui-background-light-alpha);
        backdrop-filter: blur(8px);
    }

    dialog.dialog:modal {
        border-color: #000;
        border-width: 1px;
        aspect-ratio: 1;
        max-width: 90vmin;
        height: 90vmin;
    }

    .dialog__content {
        height: 100%;
        display: flex;
        justify-content: start;
        align-items: center;
        flex-direction: column;
        padding: 1rem;
    }

    .dialog__content :global(*:last-child) {
        margin-bottom: 0;
    }

    .dialog__content figure.dialog__figure {
        height: calc(100% - 1rem);
    }

    .dialog__content.is-square figure.dialog__figure {
        /* width: calc(100% - 32px); */
        width: 100%;
    }

    .dialog__content .photo-button__picture {
        /* height: calc(100% - 16px); */
        height: 100%;
    }

    .dialog__content .photo-button__picture .photo-button__img {
        height: 100%;
        width: auto;
        object-fit: contain;
        object-position: center;
    }

    .dialog__content.is-square .photo-button__picture .photo-button__img {
        object-fit: cover;
        width: 100%;
    }

    .dialog__content figcaption.caption {
        background-color: var(--color-background-base-static, #f00);
        color: var(--color-text-base-static, #000);
        font-size: 10px;
        max-width: none;
        /* width: 100%; */
        line-height: 16px;
        text-align: left;
        /* display: inline-flex; */
        margin: 0;
        align-items: center;
        justify-content: flex-start;
        /* border: 1px solid red; */
    }
</style>
<script define:vars={{ id }} is:inline>
    document.addEventListener("astro:page-load", () => {
        const dialog = document.getElementById(`${id}`);
        const showButton = document.getElementById(`${id}-open`);
        const closeButton = document.getElementById(`${id}-close`);

        // if (!(dialog && showButton && closeButton)) {
        //     return;
        // }
        if (!(dialog && showButton)) {
            return;
        }

        // Prevent adding listeners multiple times
        if (showButton.dataset.listenersAdded) return;
        showButton.dataset.listenersAdded = "true";

        showButton.addEventListener("click", () => {
            dialog.showModal();
        });

        if (closeButton) {
            closeButton.addEventListener("click", () => {
                dialog.close();
            });
        }

        dialog.addEventListener("click", (event) => {
            if (event.target === dialog && event.currentTarget === dialog) {
                dialog.close();
            }
        });
    });
</script>
